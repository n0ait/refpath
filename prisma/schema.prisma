// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  ADMIN
  EXPERT
  CAC
  COMPTABLE
  ASSISTANT
  USER
}

enum FileType {
  VIDEO
  PICTURE
}

enum Difficulty {
  easy
  medium
  hard
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole @default(USER)
  accounts          Account[]
  trainings         TrainingUser[]
  trainingsCreation Training[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String @id @default(cuid())
  email   String 
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model TrainingUser {
  id          String @id @default(cuid())
  user        User @relation(fields: [userId], references: [id])
  userId      String
  training    Training @relation(fields: [trainingId], references: [id])
  trainingId  String
  trainingUserAnswers TrainingUserAnswer[]
  createdAt   DateTime @default(now())
  completedAt DateTime?
  isComplete  Boolean @default(false)
}

model TrainingUserAnswer {
  id              String @id @default(cuid())
  trainingUser    TrainingUser @relation(fields: [trainingUserId], references: [id])
  trainingUserId  String
  question        Question @relation(fields: [questionId], references: [id])
  questionId      String
  answers         UserAnswer[]
  timeSpent       Int?
}

model UserAnswer {
  id        String @id @default(cuid())
  name      String?
  trainingUserAnswerId String

  trainingUserAnswer TrainingUserAnswer @relation(fields: [trainingUserAnswerId], references: [id])
}

model Training {
  id         String @id @default(cuid())
  title      String?
  createdAt  DateTime @default(now())
  createdBy  String
  isPublic   Boolean @default(false)
  difficulty Difficulty
  questions  TrainingQuestion[]
  users      TrainingUser[]

  user User @relation(fields: [createdBy], references: [id])
}

model TrainingQuestion {
  question     Question @relation(fields: [questionId], references: [id])
  questionId   String
  training     Training @relation(fields: [trainingId], references: [id])
  trainingId   String

  @@id([questionId, trainingId])
}

model Question {
  id           String @id @default(cuid())
  name         String?
  trainings    TrainingQuestion[]
  propositions Proposition[]
  fileId       String?
  trainingUserAnswers TrainingUserAnswer[]

  file File? @relation(fields: [fileId], references: [id])
}

model Proposition {
  id         String @id @default(cuid())
  name       String?
  isAnswer   Boolean @default(false)
  questionId String

  question Question @relation(fields: [questionId], references: [id])
}

model File {
  id        String   @id @default(cuid())
  name      String?
  path      String?
  createdAt DateTime @default(now())
  fileType  FileType @default(PICTURE)
  questions Question[]
}